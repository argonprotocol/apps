---
name: Publish distributions

on:
  push:
    tags:
      - v[0-9]+.*
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag to publish'
        required: true
        default: 'v0.0.0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  VERSION: ${{ github.event.inputs.version || github.ref_name }}
  TAURI_CONFIG: src-tauri/tauri.conf.json
  ARGON_EXPERIMENTAL: ${{ github.event.inputs.version && contains(github.event.inputs.version, '-rc') || false }}

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn

      - name: install Rust stable (macOS)
        uses: dtolnay/rust-toolchain@stable

      - name: Ensure Rust macOS targets
        if: ${{ matrix.platform == 'macos-latest' }}
        run: |
          set -euxo pipefail
          rustup show active-toolchain
          rustup target list --installed || true
          rustup target add aarch64-apple-darwin x86_64-apple-darwin
          rustup target list --installed

      - if: runner.os == 'Windows'
        shell: pwsh
        run: echo "AWS_LC_SYS_PREBUILT_NASM=1" >> $env:GITHUB_ENV

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: yarn install

      - name: build server
        run: yarn build:server

      - name: Override vars
        if: ${{ github.event.inputs.version && contains(github.event.inputs.version, '-rc') || false }}
        run: |
          echo "TAURI_CONFIG=src-tauri/tauri.experimental.conf.json" >> $GITHUB_ENV

      - name: build and publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          ARGON_ENABLE_AUTO_UPDATE: true
          NODE_ENV: production
          RUST_BACKTRACE: full
        with:
          includeDebug: true
          tagName: ${{ env.VERSION }}
          releaseName: ${{ env.VERSION }}
          releaseBody: 'Release ${{ env.VERSION }}'
          releaseDraft: true
          prerelease: true
          updaterJsonKeepUniversal: true
          includeUpdaterJson: true
          args: ${{ matrix.args }} --config ${{ env.TAURI_CONFIG }}

      - name: Upload server artifacts
        if: ${{ matrix.platform == 'macos-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tar -czf server.tar.gz ./resources/*
          gh release upload ${{ env.VERSION }} server.tar.gz --clobber

  publish-update-channel:
    permissions:
      contents: write
    needs: publish-tauri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Publish to channel release
        if: ${{ github.event.inputs.version && contains(github.event.inputs.version, '-rc') || false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download "$VERSION" -p latest.json -D .
          cp latest.json latest-experimental.json
          gh release upload "$VERSION" latest-experimental.json --clobber
          gh release delete-asset "$VERSION" latest.json -y
