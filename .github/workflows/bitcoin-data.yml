name: Bitcoin Data Snapshot

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 4 * * *'

concurrency:
  group: bitcoin-data-snapshot
  cancel-in-progress: true

env:
  GHCR_PROJECT: ghcr.io/argonprotocol/commander

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - env_file: .env.testnet
            network: signet
            image_name: bitcoin-data-signet
          - env_file: .env.mainnet
            image_name: bitcoin-data
            network: mainnet
    runs-on: self-hosted
    permissions:
      contents: read
      id-token: write # required for cosign
      packages: write
      attestations: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clear out auto-restart from docker compose
        run: |
          # Install yq
          apt-get update && apt-get install -y yq
          # Replace any restart policy with "no"
          yq -i -y '.services."bitcoin-node".restart = "no"' docker-compose.yaml
        working-directory: server

      - name: Create network
        run: docker network create server-net || true
        working-directory: server

      - name: Clean up data dir
        run: |
          docker compose --env-file=${{ matrix.env_file }} down -v || true
          rm -rf ../data/bitcoin/*
          mkdir -p ../data/bitcoin
        working-directory: server

      - name: Bootstrap data
        run: docker compose --env-file=${{matrix.env_file}} run --rm bitcoin-data
        working-directory: server

      - name: Start bitcoin service
        run: |
          STATUS_PORT=0 docker compose --env-file=${{ matrix.env_file }} --profile=all up --build --force-recreate -d bitcoin-node status
        working-directory: server

      - name: Wait for sync via status service
        run: |
          docker compose --env-file=${{ matrix.env_file }} --profile=all logs -f &
          LOGS_PID=$!
          port=""
          for i  in {1..30}; do
            port=""
            if docker compose --env-file=${{ matrix.env_file }} port status 8080 >/tmp/port.out 2>/dev/null; then
              port=$(cut -d: -f2 </tmp/port.out)
            else
              echo "Status service not yet publishing port"
            fi
            if [ -n "$port" ]; then
              echo "Status service is running on port $port"
              break
            fi
            echo "Waiting for status service to start..."
            sleep 10
          done
          for i in {1..180}; do
            SYNC=$(curl -s "http://localhost:$port/bitcoin/syncstatus" | tee /dev/stderr | jq -r '.syncPercent')
            if [ "$(echo "$SYNC >= 100" | bc -l)" -eq 1 ]; then
              echo "Sync complete: $SYNC%"
              kill $LOGS_PID || true
              exit 0
            fi
            echo "Current sync: $SYNC% (waiting...)"
            sleep 20
          done
          echo "Node did not reach 100% sync in time"
          kill $LOGS_PID || true
          exit 1
        working-directory: server

      - name: Shutdown bitcoin cleanly
        run: |
          docker compose --env-file=${{ matrix.env_file }} exec bitcoin-node sh -c 'bitcoin-cli --conf=$BITCOIN_CONFIG stop'
          echo "Waiting for bitcoin container to exit..."
          for i in {1..60}; do
            if ! docker compose --env-file=${{ matrix.env_file }} ps -q bitcoin-node | xargs docker inspect -f '{{.State.Running}}' 2>/dev/null | grep true; then
              echo "bitcoin container has stopped"
              sleep 10 # wait a bit more for clean shutdown
              break
            fi
            sleep 2
          done
        working-directory: server

      - name: Restart and validate bitcoin
        run: |
          echo "Restarting bitcoin-node in isolated mode..."
          # clear out the connections so we don't connect to peers
          yq -i -y '.services."bitcoin-node".command += ["-maxconnections=0", "-listen=0", "-connect=0"]' docker-compose.yaml
          docker compose --env-file=${{ matrix.env_file }} up -d bitcoin-node --wait
          docker compose --env-file=${{ matrix.env_file }} exec -T bitcoin-node bash <<'EOSCRIPT'
            set -euo pipefail
            # Query blockchain info
            info=$(bitcoin-cli --conf=$BITCOIN_CONFIG getblockchaininfo)
            ibd=$(echo "$info" | jq -r .initialblockdownload)
            blocks=$(echo "$info" | jq -r .blocks)
            headers=$(echo "$info" | jq -r .headers)
            besthash=$(echo "$info" | jq -r .bestblockhash)

            echo "blocks=$blocks headers=$headers ibd=$ibd"

            # Check Core’s own sync flags
            if [ "$ibd" != "false" ] || [ "$blocks" != "$headers" ]; then
              echo "❌ Node still in IBD or not at header tip"
              exit 1
            fi

            # Check index info
            indexes=$(bitcoin-cli --conf=$BITCOIN_CONFIG getindexinfo)
            if echo "$indexes" | jq -e --argjson blocks "$blocks" '
              to_entries
              | map(.value.synced == false or .value.best_block_height != $blocks)
              | any
              '; then
              echo "❌ Indexes not fully synced or mismatched tip"
              exit 1
            fi

            echo "✅ Validation complete: blockchain and indexes are consistent"
          EOSCRIPT
        working-directory: server

      - name: Get UTXO Hash
        id: data
        run: |
          INFO=$(docker compose --env-file=${{ matrix.env_file }} exec -T bitcoin-node sh -c 'bitcoin-cli --conf=$BITCOIN_CONFIG gettxoutsetinfo')
          echo "UTXO info: $INFO"
          UTXO_HASH=$(echo "$INFO" | jq -r '.hash_serialized_3 // .hash_serialized_2')
          HEIGHT=$(echo "$INFO" | jq -r '.height')
          echo "utxo_hash=$UTXO_HASH" >> $GITHUB_OUTPUT
          echo "height=$HEIGHT" >> $GITHUB_OUTPUT
        working-directory: server

      - name: Always tear down bitcoin
        if: always()
        run: |
          docker compose --env-file=${{ matrix.env_file }} --profile=all down -v || true
        working-directory: server

      - name: Create split tar of data
        run: |
          bitcoin-data/split.sh ${{ matrix.env_file }}
          ls -lhart bitcoin-data/splits/
        working-directory: server

      - name: Build snapshot image
        run: |
          docker compose --env-file=${{ matrix.env_file }} build bitcoin-data \
            --build-arg SNAPSHOT_HEIGHT=${{ steps.data.outputs.height }} \
            --build-arg SNAPSHOT_NETWORK=${{ matrix.network }} \
            --build-arg UTXO_HASH=${{ steps.data.outputs.utxo_hash }} \
            --build-arg COMMIT_SHA=${{ github.sha }}
        working-directory: server
        env:
          SNAPSHOT_HEIGHT: ${{ steps.data.outputs.height }}
          BITCOIN_DATA_SLUG: ${{ matrix.image_name }}

      - name: Push snapshot image
        run: docker compose --env-file=${{ matrix.env_file }} push bitcoin-data
        working-directory: server
        env:
          SNAPSHOT_HEIGHT: ${{ steps.data.outputs.height }}
          SNAPSHOT_NETWORK: ${{ matrix.network }}
          UTXO_HASH: ${{ steps.data.outputs.utxo_hash }}
          COMMIT_SHA: ${{ github.sha }}

      # --- Attestation ---
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Get image digest
        id: digest
        run: |
          DIGEST=$(docker buildx imagetools inspect ${{ env.GHCR_PROJECT }}/${{ matrix.image_name }}:height-${{ steps.data.outputs.height }} \
            --format '{{json .Manifest.Digest}}' | tr -d '"')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Image digest: $DIGEST"

      - name: Attest build provenance (GitHub official)
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GHCR_PROJECT }}/${{ matrix.image_name }}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

      - name: Prune non-latest images
        run: |
          rm server/bitcoin-data/splits/* || true
          docker image prune -f || true
          docker buildx prune -af || true
          for img in $(docker images --format '{{.Repository}}:{{.Tag}}' ${{ env.GHCR_PROJECT }}/${{ matrix.image_name }} \
              | grep -v ':latest$'); do
            docker rmi -f "$img" || true
          done
